高层
    董事会
    董事长
    董事
    董事

    CEO 首席执行官
    COO 首席运营官
    CTO 首席技术官
    CFO 首席财务官

    总裁

中层
    总经理
    经理
    总监

基层员工
    产品策划
    程序员
    美术
    UI
    运营
    测试
    会计
    出纳
    行政
    人力


项目经理

产品经理
    - 产品策划


单元测试

import unittest


产品开发

1. 立项
2. 产品人员进行原型设计
3. 产品人员整理产品需求文档
4. 产品经理组织 “产品需求讨论会”
5. UI 绘制页面元素 / 前端进行客户端开发 / 后段进行服务器开发
6. 前后端联合调试
7. 提交测试
8. 上线、服务重启


接口数据格式: JSON / YAML / Protobuf / XML

敏捷开发 Scrum
1. 每天早晨 5 分钟站会
2. 甘特图 / 燃尽图
3. deadline


Git 命令回顾

init        初始化一个仓库
add         添加指定的修改过的文件到暂存区
commit      将暂存区的修改提交本地仓库
push      * 将本地仓库的提交推送到远程仓库
pull      * 将远程仓库的提交拉取到本地仓库, 同时将代码与本地仓库合并
clone     * 将远程仓库完整下载到本地
remote      管理与远程仓库的对接方式
reset       将暂存区的内容撤出 / 重置版本
checkout    切换分支 / 代码还原 / 代码回滚
status      查看当前代码状态
branch      分支管理
merge       合并分支
log         查看提交历史
config      管理本地配置
diff        差异对比

fetch     * 将远程仓库的提交拉取到本地仓库


代码审核


Git Flow
=========

分支
    master: 主干分支，最稳定的代码，经过了严格的测试，可以随时上线
    develop: 开发分支，汇总了每个开发者完成的最新的功能，经过了初步的测试，稳定性不如 master 分支
    feature: 功能分支，开发者为了完成功能开发而创建的分支，每个功能创建一个


                                                            生产环境
                                                               ^
                                                               | 2. 服务器重启
                                                               | 1. 代码上传
        0.1           0.5    1.0                           2.0 |
master  *-------------*------*---------------------------------*---------------->
         \            ^      ^                                 ^
          |           |      |                                 | 3. 审核、合并
          |           |      |                                 | 2. 提交 PR (pull request)
          V           |      |                                 | 1. 代码部署到测试服务器，进行测试
develop   *----*------*--*---*-------------------*------*------*-------------------->
                             |\                / ^
                             | |              |  | 4. 审核完成后进行代码合并
                             | |              |  | 3. 其他开发者进行 “代码审核” (Code Review)
                             | V              |  | 2. 向其他开发者发起 “拉取请求” (Pull Request)
feat-like                    | *-----*-----*-----* 1. 开发者自测没问题，将代码推送到远程仓库
                             |                |
                             |                | 将别人最新的修改拉取到当前开发分支:
                             |                | 1. git pull origin develop
                             V                V 2. 自行合并冲突
feat-follow                  *----*----*------*------------------------------>


生产环境: 线上正是服务器，直接面向普通用户，运行 master 分支的代码
测试环境: 公司内部的测试服务器，面向开发者和测试人员，运行 develop 或 master 分支的代码
开发环境: 开发者的个人电脑，面向开发者自己，运行任何分支代码
