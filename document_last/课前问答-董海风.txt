购物车表结构设计
id   product_id   uid   num   time


================================================================================


TCP/IP

点击一个链接后，到最终页面渲染出来，中间经过的处理流程

1. 浏览器对 URL 进行解析: 协议、主机(域名)、端口、路径、参数、锚点
2. 向 DNS 服务器进行 域名解析，获得 IP 地址
3. 建立网络连接
    1. client -> SYN       -> server
    2. client <- ACK + SYN <- server
    3. client ->       ACK -> server
4. 浏览器封装 “请求报文”
    GET /user/login HTTP/1.1
    Host: www.lagou.com
    Connection: keep-alive
    Cache-Control: max-age=0
    DNT: 1
    Upgrade-Insecure-Requests: 1
    User-Agent: Mozilla/5.0
5. 浏览器将 “请求报文” 发送给服务器

6. HTTP Server 接收 “请求报文”
7. WSGI 将 “请求报文” 解析，并且封装成 HttpRequest 对象
8. WebApp (Django/Flask/Tornado) 开始进行处理
    1. URL 匹配: 通过 URL 得到一个 视图函数 (View Function)
    2. 视图函数 进行逻辑处理: 参数提取、数据库处理、缓存处理、逻辑运算
    3. 视图函数 将逻辑处理的结果封装到 HttpResponse 对象中
9. WSGI 将 HttpResponse 对象封装成 “响应报文”
10. HTTP Server 将 “响应报文” 发送给浏览器
11. HTTP Server 断开与客户端的 TCP 连接
    1. server -> FIN -> client
    2. server <- ACK <- client
       让数据飞一会 (数据传输时间)
    3. server <- FIN <- client
    4. server -> ACK -> client

12. 浏览器接收 “响应报文”
13. 浏览器进行协议解析
14. 页面渲染


================================================================================


sock = socket.socket()
sock.accept()  <---  sock.connect()
sock.send(data)  ----> sock.recv(1000)


================================================================================


TCP 是全双工协议

半双工
A ===============> B

全双工
A ===============> B
A <=============== B


================================================================================


HTTP Server 负责：
1. 网络的建立和断开
2. 数据的接收和发送


================================================================================

WSGI:
1. 解析请求报文，封装成 HttpRequest 对象
2. 解析 HttpResponse 对象，封装成 响应报文


浏览器
 | ^
 V |
HTTP服务器
 | ^
 V |
WSGI
 | ^
 V |
WebApp


================================================================================


数据库优化
- 引擎
- 分库分表
- 索引
- Redis
